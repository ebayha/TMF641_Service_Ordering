{
    "swagger": "2.0", 
    "info": {
        "title": "API ServiceOrdering", 
        "description": "## TMF API Reference : TMF 641 - Service Ordering Management\n\n## Release : 18.0 - May 2018\n\nThe Service Order API provides a standardized mechanism for managing Service Order, a type of order which can be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa.\n\n### Service Order resource\nA service order will describe a list of service order items.  A service order item references an action on an existing  or  future  service.  By  service  we  designed  Customer Facing  Service  (CFS)  as  well  as  Resource Facing Service (RFS).\nFrom a component perspective, a service order should be available\n- from a Service Orchestration Component (and it could mix CFS and RFS)\n- from an Infrastructure Control & Management component (and it would have only RFS)\n\n### Service Order API performs the following operations on service order :\n- Retrieval of a service order or a collection of service orders depending on filter criteria\n- Partial update of a service order (including updating rules)\n- Creation of a service order (including default values and creation rules)\n- Deletion of service order (for administration purposes)\n- Notification of events on Service order\n\nCopyright \u00a9 TM Forum 2018. All Rights Reserved", 
        "version": "3.0.0"
    }, 
    "host": "serverRoot", 
    "basePath": "/tmf-api/serviceOrdering/v3/", 
    "schemes": [
        "https"
    ], 
    "consumes": [
        "application/json;charset=utf-8"
    ], 
    "produces": [
        "application/json;charset=utf-8"
    ], 
    "tags": [
        {
            "name": "serviceOrder"
        }, 
        {
            "name": "events subscription"
        }
    ], 
    "paths": {
        "/serviceOrder": {
            "get": {
                "operationId": "listServiceOrder", 
                "summary": "List or find 'ServiceOrder' objects", 
                "description": "This operation List or find 'ServiceOrder' entities", 
                "tags": [
                    "serviceOrder"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma separated properties to display in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceOrder"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceOrder", 
                "summary": "Creates a 'ServiceOrder'", 
                "description": "This operation Creates a 'ServiceOrder' entity.", 
                "tags": [
                    "serviceOrder"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceOrder_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceOrder", 
                        "description": "The Service Order to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceOrder"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceOrder/{id}": {
            "get": {
                "operationId": "retrieveServiceOrder", 
                "summary": "Retrieves a 'ServiceOrder' by Id", 
                "description": "This operation Retrieves a 'ServiceOrder' entity.Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "serviceOrder"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service Order"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Attributes selection"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceOrder"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceOrder", 
                "summary": "Updates partially a 'ServiceOrder' by Id", 
                "description": "This operation Updates partially a 'ServiceOrder' entity.", 
                "tags": [
                    "serviceOrder"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service Order"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceOrder_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceOrder", 
                        "description": "The Service Order to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceOrder"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteServiceOrder", 
                "summary": "Deletes a 'ServiceOrder' by Id", 
                "description": "This operation Deletes a 'ServiceOrder' entity.", 
                "tags": [
                    "serviceOrder"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service Order"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub": {
            "post": {
                "operationId": "registerListener", 
                "summary": "Register a listener", 
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "data", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Subscribed", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener", 
                "summary": "Unregister a listener", 
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "id", 
                        "type": "string", 
                        "required": true, 
                        "in": "path", 
                        "description": "The id of the registered listener"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "405": {
                        "description": "Method not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    }, 
    "definitions": {
        "ActionType": {
            "type": "string", 
            "description": "", 
            "enum": [
                "add", 
                "modify", 
                "delete", 
                "noChange"
            ]
        }, 
        "AppointmentRef": {
            "type": "object", 
            "description": "Used to precise that an appointment was set-up with a related party for this order item", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the appointment"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the appointmenrt"
                }, 
                "@referredType": {
                    "type": "string"
                }
            }
        }, 
        "Note": {
            "type": "object", 
            "description": "Extra-information about the order (e.g. useful to add extra delivery information that could be useful for a human process", 
            "properties": {
                "author": {
                    "type": "string", 
                    "description": "Author of the note"
                }, 
                "text": {
                    "type": "string", 
                    "description": "Text of the note"
                }, 
                "date": {
                    "$ref": "#/definitions/Date", 
                    "description": "Date of the note"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "OrderItemRelationship": {
            "type": "object", 
            "description": "Linked order item to the one containing this attribute", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of an order item"
                }, 
                "type": {
                    "type": "string", 
                    "description": "The type of related order item, can be : dependancy if the order item needs to be \u201cnot started\u201d until another order item is complete"
                }
            }
        }, 
        "OrderRelationship": {
            "type": "object", 
            "description": "Linked order to the one containing this attribute", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "The id of the related order"
                }, 
                "href": {
                    "type": "string", 
                    "description": "A hyperlink to the related order"
                }, 
                "type": {
                    "type": "string", 
                    "description": "The type of related order, can be : \u201cdependency\u201d if the order needs to be \u201cnot started\u201d until another order item is complete (a service order in this case) or \u201ccross-ref\u201d to keep track of the source order (a productOrder)"
                }, 
                "@referredType": {
                    "type": "string"
                }
            }
        }, 
        "Place": {
            "type": "object", 
            "description": "Used to defined a place useful for the service (for example a delivery geographical place)", 
            "properties": {
                "id": {
                    "type": "string"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of a place (for instance in google map)"
                }, 
                "name": {
                    "type": "string"
                }, 
                "role": {
                    "type": "string", 
                    "description": "The role of the place (e.g. delivery address, install site etc)"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string"
                }
            }
        }, 
        "RelatedParty": {
            "type": "object", 
            "description": "A related party defines party which are involved in this order and the role they are playing", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of a related party"
                }, 
                "href": {
                    "type": "string", 
                    "description": "An hyperlink to the party"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the related party"
                }, 
                "role": {
                    "type": "string", 
                    "description": "The role of the related party (e.g. Owner, requester, fullfiller etc)"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string"
                }
            }
        }, 
        "Service": {
            "type": "object", 
            "description": "Service attributes description (these are as per the Service ODE model as used in the Service Inventory specification)", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Identifier of a service instance"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference to the owned Service (useful for delete or modify command)"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the service"
                }, 
                "serviceState": {
                    "type": "string", 
                    "description": "The lifecycle state of the service"
                }, 
                "type": {
                    "type": "string"
                }, 
                "place": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                }, 
                "serviceCharacteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceCharacteristic"
                    }
                }, 
                "serviceRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRelationship"
                    }
                }, 
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string"
                }, 
                "@type": {
                    "type": "string"
                }
            }
        }, 
        "ServiceCharacteristic": {
            "type": "object", 
            "description": "ServiceCharacteristic", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of characteristic"
                }, 
                "valueType": {
                    "type": "string"
                }, 
                "value": {
                    "$ref": "#/definitions/Value"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceOrder": {
            "type": "object", 
            "description": "A Service Order is a type of order which can be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "ID created on repository side"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access the order"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Used to categorize the order that can be useful for the OM system (e.g. \u201cbroadband\u201d, \u201cTVOption\u201d, ...)"
                }, 
                "completionDate": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A free-text description of the service order"
                }, 
                "expectedCompletionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Expected delivery date amended by the provider"
                }, 
                "externalId": {
                    "type": "string", 
                    "description": "ID given by the consumer and only understandable by him (to facilitate his searches)"
                }, 
                "notificationContact": {
                    "type": "string", 
                    "description": "Contact attached to the order to send back information regarding this order"
                }, 
                "orderDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "priority": {
                    "type": "string", 
                    "description": "A way that can be used by consumers to prioritize orders in Service Order Management system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)"
                }, 
                "requestedCompletionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Requested delivery date from the requestor perspective"
                }, 
                "requestedStartDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Order start date wished by the requestor"
                }, 
                "startDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the order was started for processing"
                }, 
                "note": {
                    "$ref": "#/definitions/Note"
                }, 
                "orderItem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceOrderItem"
                    }
                }, 
                "orderRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/OrderRelationship"
                    }
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                }, 
                "state": {
                    "$ref": "#/definitions/StateType"
                }, 
                "@baseType": {
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "type": "string"
                }, 
                "@type": {
                    "type": "string"
                }
            }
        }, 
        "ServiceOrder_Create": {
            "type": "object", 
            "description": "A Service Order is a type of order which can be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa\nSkipped properties: id,href", 
            "properties": {
                "category": {
                    "type": "string", 
                    "description": "Used to categorize the order that can be useful for the OM system (e.g. \u201cbroadband\u201d, \u201cTVOption\u201d, ...)"
                }, 
                "completionDate": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A free-text description of the service order"
                }, 
                "expectedCompletionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Expected delivery date amended by the provider"
                }, 
                "externalId": {
                    "type": "string", 
                    "description": "ID given by the consumer and only understandable by him (to facilitate his searches)"
                }, 
                "notificationContact": {
                    "type": "string", 
                    "description": "Contact attached to the order to send back information regarding this order"
                }, 
                "orderDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "priority": {
                    "type": "string", 
                    "description": "A way that can be used by consumers to prioritize orders in Service Order Management system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)"
                }, 
                "requestedCompletionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Requested delivery date from the requestor perspective"
                }, 
                "requestedStartDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Order start date wished by the requestor"
                }, 
                "startDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the order was started for processing"
                }, 
                "note": {
                    "$ref": "#/definitions/Note"
                }, 
                "orderItem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceOrderItem"
                    }
                }, 
                "orderRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/OrderRelationship"
                    }
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                }, 
                "state": {
                    "$ref": "#/definitions/StateType"
                }, 
                "@baseType": {
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "type": "string"
                }, 
                "@type": {
                    "type": "string"
                }
            }
        }, 
        "ServiceOrder_Update": {
            "type": "object", 
            "description": "A Service Order is a type of order which can be used to place an order between a customer and a service provider or between a service provider and a partner and vice versa\nSkipped properties: id,href", 
            "properties": {
                "category": {
                    "type": "string", 
                    "description": "Used to categorize the order that can be useful for the OM system (e.g. \u201cbroadband\u201d, \u201cTVOption\u201d, ...)"
                }, 
                "completionDate": {
                    "type": "string"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A free-text description of the service order"
                }, 
                "expectedCompletionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Expected delivery date amended by the provider"
                }, 
                "externalId": {
                    "type": "string", 
                    "description": "ID given by the consumer and only understandable by him (to facilitate his searches)"
                }, 
                "notificationContact": {
                    "type": "string", 
                    "description": "Contact attached to the order to send back information regarding this order"
                }, 
                "orderDate": {
                    "type": "string", 
                    "format": "date-time"
                }, 
                "priority": {
                    "type": "string", 
                    "description": "A way that can be used by consumers to prioritize orders in Service Order Management system (from 0 to 4 : 0 is the highest priority, and 4 the lowest)"
                }, 
                "requestedCompletionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Requested delivery date from the requestor perspective"
                }, 
                "requestedStartDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Order start date wished by the requestor"
                }, 
                "startDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the order was started for processing"
                }, 
                "note": {
                    "$ref": "#/definitions/Note"
                }, 
                "orderItem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceOrderItem"
                    }
                }, 
                "orderRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/OrderRelationship"
                    }
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                }, 
                "state": {
                    "$ref": "#/definitions/StateType"
                }, 
                "@baseType": {
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "type": "string"
                }, 
                "@type": {
                    "type": "string"
                }
            }
        }, 
        "ServiceOrderItem": {
            "type": "object", 
            "description": "An identified part of the order. A service order is decomposed into one or more order items.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Identifier of the line item (generally it is a sequence number 01, 02, 03, \u2026)"
                }, 
                "action": {
                    "$ref": "#/definitions/ActionType"
                }, 
                "appointment": {
                    "$ref": "#/definitions/AppointmentRef"
                }, 
                "orderItemRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/OrderItemRelationship"
                    }
                }, 
                "service": {
                    "$ref": "#/definitions/Service"
                }, 
                "state": {
                    "$ref": "#/definitions/StateType"
                }, 
                "@baseType": {
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "type": "string"
                }, 
                "@type": {
                    "type": "string"
                }
            }
        }, 
        "ServiceRelationship": {
            "type": "object", 
            "description": "Linked Services to the one instantiate", 
            "properties": {
                "type": {
                    "type": "string", 
                    "description": "Relationship type. It can be : \u201creliesOn\u201d if the Service needs another already owned Service to rely on (e.g. an option on an already owned mobile access Service) or \u201ctargets\u201d or \u201cisTargeted\u201d (depending on the way of expressing the link) for any other kind of links that may be useful"
                }, 
                "service": {
                    "$ref": "#/definitions/Service"
                }
            }
        }, 
        "ServiceSpecificationRef": {
            "type": "object", 
            "description": "The service specification (default values, etc. are fetched from the catalogue).", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the service specification"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the service specification"
                }, 
                "name": {
                    "type": "string"
                }, 
                "version": {
                    "type": "string"
                }, 
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema"
                }, 
                "@baseType": {
                    "type": "string"
                }, 
                "@schemaLocation": {
                    "type": "string"
                }, 
                "@type": {
                    "type": "string"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The type of the referred entity", 
                    "format": "uri"
                }
            }
        }, 
        "StateType": {
            "type": "string", 
            "description": "", 
            "enum": [
                "acknowledged", 
                "rejected", 
                "pending", 
                "held", 
                "inProgress", 
                "cancelled", 
                "completed", 
                "failed", 
                "partial"
            ]
        }, 
        "TargetServiceSchema": {
            "type": "object", 
            "properties": {
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string"
                }, 
                "@type": {
                    "type": "string"
                }
            }
        }, 
        "Value": {
            "type": "object", 
            "description": "Value is a descriptive structure for service characteristic", 
            "properties": {
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string"
                }, 
                "@type": {
                    "type": "string"
                }
            }
        }, 
        "EventSubscription": {
            "required": [
                "id", 
                "callback"
            ], 
            "type": "object", 
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Id of the listener"
                }, 
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "EventSubscriptionInput": {
            "required": [
                "callback"
            ], 
            "type": "object", 
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information", 
            "properties": {
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "Error": {
            "required": [
                "code", 
                "reason"
            ], 
            "type": "object", 
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)", 
            "properties": {
                "code": {
                    "type": "integer", 
                    "description": "Application relevant detail, defined in the API or a common list."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                }, 
                "message": {
                    "type": "string", 
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                }, 
                "status": {
                    "type": "integer", 
                    "description": "HTTP Error code extension"
                }, 
                "referenceError": {
                    "type": "string", 
                    "description": "URI of documentation describing the error.", 
                    "format": "uri"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}