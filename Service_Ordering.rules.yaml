## API rule definitions

api 'API ServiceOrdering':
  doc: "## TMF API Reference :\ TMF 641 -\ Service Ordering Management\n\n Version 4.0 - Sprint S1 2020\n\nThe Service Order API provides a standardized mechanism for managing Service Order, a type of order which can be used to place an order between internal Customer Order management system to service order management system or between a service provider and a partner and vice versa.\n\n### Service Order resource\nA service order will describe a list of service order items.  A service order item references an action on an existing  or  future  service.  By  service  we  designed  Customer Facing  Service  (CFS)  as  well  as  Resource Facing Service (RFS).\nFrom a component perspective, a service order should be available\n-\ from a Service Orchestration Component (and it could mix CFS and RFS)\n-\ from an Infrastructure Control & Management component (and it would have only RFS)\n\n### TMF641 performs the following operations on service order resource :\n-\ Retrieval of a service order or a collection of service orders depending on filter criteria\n-\ Partial update of a service order (including updating rules)\n-\ Creation of a service order (including default values and creation rules)\n-\ Deletion of service order (for administration purposes)\n-\ Notification of events on Service order\n\n**Cancel Service Order resource**\n\nThis resource is used to request a service order cancellation.\n\n**TMF641 provides following operations on Cancel Service Order resource :**\n\n-\ Retrieval of a cancel service order or a collection of cancel service orders \n-\ Creation of a cancel service order \n-\ Notification of events on cancel service order.\n\nCopyright Â© TM Forum 2019. All Rights Reserved"
  hostUrl: "https://serverRoot"
  basePath: "/tmf-api/serviceOrdering/v4/"
  version: "4.0.0"
  flavors: regular
  resources:
    - ServiceOrder
    - CancelServiceOrder
  ## ServiceOrder
  rules ServiceOrder:
    operations: GET,POST,PATCH,DELETE
    mandatory in post: orderItem
    hidden in post: orderDate, completionDate, expectedCompletionDate, startDate, state
    sub mandatory in patch/post:
       orderItem: id, action, service
       relatedParty: id, @referredType
       note: text
       appointment: id
       orderRelationship: id, relationshipType
       supportingResource: id
       serviceRelationship: id, relationshipType
       serviceCharacteristic: name, value
    patchable: ALL EXCEPT id, href, orderDate
    pre-conditions:
      - When creating a service order (post) an order must not have the state field valued
      - When creating a service order (post) an order item must not have the state field valued
    notifications: 
      - create
      - attributeValueChange
      - stateChange
      - delete
      - informationRequired
  ## CancelServiceOrder
  rules CancelServiceOrder:
     operations: GET, POST
     mandatory in post: ServiceOrder
     hidden in post:  state, effectiveCancellationDate      
     sub mandatory in patch/post:
       ServiceOrder: id
     pre-conditions:
        - service order id must exist
     notifications:
     - create
     - stateChange
     - informationRequired
